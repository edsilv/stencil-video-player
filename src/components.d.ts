/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface ControlBar {
    'visible': boolean;
  }
  interface CuesBox {
    'cues': any;
    'visible': boolean;
  }
  interface FullscreenButton {
    'fullscreen': boolean;
  }
  interface MuteButton {
    'muted': boolean;
  }
  interface PlayButton {
    'playing': boolean;
  }
  interface ScrubBar {
    'duration': number;
    'progress': number;
    'thumbnails': TextTrack;
  }
  interface SubtitlesButton {
    'enabled': boolean;
  }
  interface ThumbnailPreview {
    'options': any;
  }
  interface TimeLabel {
    'time': number;
  }
  interface VideoPlayer {}
  interface VolumeBar {
    'level': number;
  }
}

declare global {


  interface HTMLControlBarElement extends Components.ControlBar, HTMLStencilElement {}
  var HTMLControlBarElement: {
    prototype: HTMLControlBarElement;
    new (): HTMLControlBarElement;
  };

  interface HTMLCuesBoxElement extends Components.CuesBox, HTMLStencilElement {}
  var HTMLCuesBoxElement: {
    prototype: HTMLCuesBoxElement;
    new (): HTMLCuesBoxElement;
  };

  interface HTMLFullscreenButtonElement extends Components.FullscreenButton, HTMLStencilElement {}
  var HTMLFullscreenButtonElement: {
    prototype: HTMLFullscreenButtonElement;
    new (): HTMLFullscreenButtonElement;
  };

  interface HTMLMuteButtonElement extends Components.MuteButton, HTMLStencilElement {}
  var HTMLMuteButtonElement: {
    prototype: HTMLMuteButtonElement;
    new (): HTMLMuteButtonElement;
  };

  interface HTMLPlayButtonElement extends Components.PlayButton, HTMLStencilElement {}
  var HTMLPlayButtonElement: {
    prototype: HTMLPlayButtonElement;
    new (): HTMLPlayButtonElement;
  };

  interface HTMLScrubBarElement extends Components.ScrubBar, HTMLStencilElement {}
  var HTMLScrubBarElement: {
    prototype: HTMLScrubBarElement;
    new (): HTMLScrubBarElement;
  };

  interface HTMLSubtitlesButtonElement extends Components.SubtitlesButton, HTMLStencilElement {}
  var HTMLSubtitlesButtonElement: {
    prototype: HTMLSubtitlesButtonElement;
    new (): HTMLSubtitlesButtonElement;
  };

  interface HTMLThumbnailPreviewElement extends Components.ThumbnailPreview, HTMLStencilElement {}
  var HTMLThumbnailPreviewElement: {
    prototype: HTMLThumbnailPreviewElement;
    new (): HTMLThumbnailPreviewElement;
  };

  interface HTMLTimeLabelElement extends Components.TimeLabel, HTMLStencilElement {}
  var HTMLTimeLabelElement: {
    prototype: HTMLTimeLabelElement;
    new (): HTMLTimeLabelElement;
  };

  interface HTMLVideoPlayerElement extends Components.VideoPlayer, HTMLStencilElement {}
  var HTMLVideoPlayerElement: {
    prototype: HTMLVideoPlayerElement;
    new (): HTMLVideoPlayerElement;
  };

  interface HTMLVolumeBarElement extends Components.VolumeBar, HTMLStencilElement {}
  var HTMLVolumeBarElement: {
    prototype: HTMLVolumeBarElement;
    new (): HTMLVolumeBarElement;
  };
  interface HTMLElementTagNameMap {
    'control-bar': HTMLControlBarElement;
    'cues-box': HTMLCuesBoxElement;
    'fullscreen-button': HTMLFullscreenButtonElement;
    'mute-button': HTMLMuteButtonElement;
    'play-button': HTMLPlayButtonElement;
    'scrub-bar': HTMLScrubBarElement;
    'subtitles-button': HTMLSubtitlesButtonElement;
    'thumbnail-preview': HTMLThumbnailPreviewElement;
    'time-label': HTMLTimeLabelElement;
    'video-player': HTMLVideoPlayerElement;
    'volume-bar': HTMLVolumeBarElement;
  }
}

declare namespace LocalJSX {
  interface ControlBar {
    'visible'?: boolean;
  }
  interface CuesBox {
    'cues'?: any;
    'visible'?: boolean;
  }
  interface FullscreenButton {
    'fullscreen'?: boolean;
    'onEnterFullscreen'?: (event: CustomEvent<any>) => void;
    'onExitFullscreen'?: (event: CustomEvent<any>) => void;
  }
  interface MuteButton {
    'muted'?: boolean;
    'onMute'?: (event: CustomEvent<any>) => void;
    'onUnmute'?: (event: CustomEvent<any>) => void;
  }
  interface PlayButton {
    'onPause'?: (event: CustomEvent<any>) => void;
    'onPlay'?: (event: CustomEvent<any>) => void;
    'playing'?: boolean;
  }
  interface ScrubBar {
    'duration'?: number;
    'onSeekEnd'?: (event: CustomEvent<any>) => void;
    'onSeekMove'?: (event: CustomEvent<any>) => void;
    'onSeekStart'?: (event: CustomEvent<any>) => void;
    'progress'?: number;
    'thumbnails'?: TextTrack;
  }
  interface SubtitlesButton {
    'enabled'?: boolean;
    'onSubtitles'?: (event: CustomEvent<any>) => void;
  }
  interface ThumbnailPreview {
    'options'?: any;
  }
  interface TimeLabel {
    'time'?: number;
  }
  interface VideoPlayer {}
  interface VolumeBar {
    'level'?: number;
    'onVolume'?: (event: CustomEvent<any>) => void;
  }

  interface IntrinsicElements {
    'control-bar': ControlBar;
    'cues-box': CuesBox;
    'fullscreen-button': FullscreenButton;
    'mute-button': MuteButton;
    'play-button': PlayButton;
    'scrub-bar': ScrubBar;
    'subtitles-button': SubtitlesButton;
    'thumbnail-preview': ThumbnailPreview;
    'time-label': TimeLabel;
    'video-player': VideoPlayer;
    'volume-bar': VolumeBar;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'control-bar': LocalJSX.ControlBar & JSXBase.HTMLAttributes<HTMLControlBarElement>;
      'cues-box': LocalJSX.CuesBox & JSXBase.HTMLAttributes<HTMLCuesBoxElement>;
      'fullscreen-button': LocalJSX.FullscreenButton & JSXBase.HTMLAttributes<HTMLFullscreenButtonElement>;
      'mute-button': LocalJSX.MuteButton & JSXBase.HTMLAttributes<HTMLMuteButtonElement>;
      'play-button': LocalJSX.PlayButton & JSXBase.HTMLAttributes<HTMLPlayButtonElement>;
      'scrub-bar': LocalJSX.ScrubBar & JSXBase.HTMLAttributes<HTMLScrubBarElement>;
      'subtitles-button': LocalJSX.SubtitlesButton & JSXBase.HTMLAttributes<HTMLSubtitlesButtonElement>;
      'thumbnail-preview': LocalJSX.ThumbnailPreview & JSXBase.HTMLAttributes<HTMLThumbnailPreviewElement>;
      'time-label': LocalJSX.TimeLabel & JSXBase.HTMLAttributes<HTMLTimeLabelElement>;
      'video-player': LocalJSX.VideoPlayer & JSXBase.HTMLAttributes<HTMLVideoPlayerElement>;
      'volume-bar': LocalJSX.VolumeBar & JSXBase.HTMLAttributes<HTMLVolumeBarElement>;
    }
  }
}


